const axios = require('axios');
const cheerio = require('cheerio');
const validUrl = require('valid-url');

// This class can extract top N valid posts from HackerNews in JSON format
// Usage: instance.getTopPosts(N)
class HackerNewsScraper {
  constructor() {
    this.URL = 'https://news.ycombinator.com';
  }

  // This function returns the top n valid posts from Hacker News
  //
  // @n is the total number of valid posts need to extract
  // @returns JSON
  async getTopPosts(n) {
    const numberOfPosts = Number(n);
    let page = 0;
    let topPosts = [];
    let requiredPosts = numberOfPosts;
    let response;

    if(!this._isValidateProp(numberOfPosts)) {
      throw 'Number of posts should be a positive integer <= 100';
    }

    while(requiredPosts) {
      page++;
      
      try {
        response = await axios.get(`${this.URL}/news?p=${page}`);
      } catch(err) {
        throw `${err} while hitting URL: ${this.URL}`;
      }

      try {
        let parsedPosts = this._parseHtml(response.data, requiredPosts);
        topPosts = topPosts.concat(parsedPosts);
        requiredPosts -= parsedPosts.length;
      } catch(err) {
        throw err;
      }
    }

    return topPosts;
  }

  _isPositiveInteger(value) {
    return !Number.isInteger(value) || value<=0 ? false : true;
  }

  _isNonNegativeInteger(value) {
    return !Number.isInteger(value) || value<0 ? false : true;
  }

  _isValidString(value) {
    return !value || value.length <= 0 || value.length > 256 ? false : true;
  }

  _isValidateProp(numberOfPosts) {
    return !this._isPositiveInteger(numberOfPosts) || numberOfPosts>100 ? false : true;
  }

  // A post is valid if the following constraints matched:
  // title and author are non empty strings not longer than 256 characters.
  // uri is a valid URI
  // points, comments and rank are integers >= 0.
  _isValidPost(post) {
    return !this._isValidString(post.title) || !this._isValidString(post.author) ||
            !validUrl.isUri(post.uri) || !this._isNonNegativeInteger(post.rank) ||
            !this._isNonNegativeInteger(post.points) || !this._isNonNegativeInteger(post.comments) ? false : true;
  }

  // This function takes a HTML page, parse the posts one by one until it reaches the limit(numberOfPosts).
  // Then check if the post is valid or not
  // If a post is valid, add it to the parsedPosts list
  //
  // @html is a DOM from which we extract valid posts
  // @numberOfPosts is the maximum number of valid posts we need to extract
  // @returns valid posts from this page as JSON
  _parseHtml(html, numberOfPosts) {
    try {
      let $ = cheerio.load(html);
      let titleRows = $('.athing');
      let parsedPosts = [];

      if (!titleRows.length) {
        throw 'Not enough valid posts.';
      }

      for(let i=0; i<titleRows.length && parsedPosts.length < numberOfPosts; i++) {
        let titleRow = titleRows[i];
        let subtextRow = $(titleRow).next();
        // First row contains title, uri and rank
        // Second row contains points, author and comments
        let post = {
          title: $(titleRow).find('.storylink').text(),
          uri: $(titleRow).find('.storylink').attr('href'),
          author: $(subtextRow).find('.hnuser').text(),
          rank: Number($(titleRow).find('.rank').text().slice(0, -1)),
          points: Number($(subtextRow).find('.score').text().split(' ')[0]),
          comments: Number($(subtextRow).find('.subtext').children().last().text().slice(0, -8)),
        }

        if(this._isValidPost(post)) {
          parsedPosts.push(post);
        }
      }

      return parsedPosts;
    }
    catch(err) {
      throw err;
    }
  }
}

module.exports.HackerNewsScraper = HackerNewsScraper;
